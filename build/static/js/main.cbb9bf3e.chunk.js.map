{"version":3,"sources":["logo.svg","ProductsTypes.ts","BasketSummary.tsx","Header.tsx","ProductsData.ts","ProductsAction.ts","WithLoader.tsx","ProductList.tsx","ProductsPage.tsx","Tabs.tsx","Product.tsx","BasketTypes.ts","BasketAction.ts","ProductPage.tsx","LoginPage.tsx","Form.tsx","ContactUs.tsx","ContactUsPage.tsx","Routes.tsx","ProductsReducer.ts","BasketReducer.tsx","Store.tsx","index.tsx"],"names":["module","exports","ProductsActionTypes","BasketSummary","props","className","count","withRouter","connect","store","basketCount","basket","products","length","React","search","setSearch","searchParams","URLSearchParams","location","get","type","placeholder","value","onChange","e","currentTarget","onKeyDown","key","history","push","src","logo","alt","to","activeClassName","getProduct","id","a","wait","foundProducts","filter","customer","getAsyncProduct","ms","Promise","resolve","setTimeout","description","name","price","reviews","comment","reviewer","loading","LOADING","withLoader","Component","map","product","toLowerCase","indexOf","ProductsPage","this","getProducts","productsLoading","dispatch","getProductsFromAPI","GETALL","TabsContext","Tabs","handleTabClick","content","setState","activeName","activeContent","state","Provider","children","Tab","Consumer","context","initialActive","onClick","heading","LikeActionTypes","initialLikeState","likes","lastLike","BasketActionTypes","reducer","action","LIKE","now","inBasket","review","Intl","NumberFormat","currency","style","format","onAddToBasket","Date","ProductPage","handleAddClick","addToBasket","navAwayMessage","match","params","parseInt","when","added","message","basketProducts","currentProduct","undefined","some","p","ADD","getProductFromAPI","GETSINGLE","LoginPage","required","fieldName","values","minLength","FormContext","errors","Form","setValue","newValues","validate","rules","validationRules","Array","isArray","error","validator","args","newErrors","handleSubmit","preventDefault","isValidForSubmit","submitting","onSubmit","result","submitted","success","Object","keys","reduce","b","alert","defaultValue","forEach","hasError","noValidate","disabled","Field","label","options","handleChange","handleBlur","htmlFor","onBlur","option","defaultProps","ContactUs","email","reason","notes","ContactUsPage","AdminPage","lazy","Routes","loggedIn","TransitionGroup","CSSTransition","timeout","classNames","exact","path","component","fallback","render","RoutesWrap","initialProductState","initialBasketState","rootReducer","combineReducers","concat","Root","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,oGCE/BC,E,8GCYGC,EARyB,SAAAC,GACpC,OACI,uBAAKC,UAAU,kBACVD,EAAME,Q,iCCiDJC,cAAWC,aANH,SAACC,GACpB,MAAO,CACHC,YAAcD,EAAME,OAAOC,SAASC,UAIlBL,EA9CO,SAACJ,GAAW,IAAD,EAEbU,WAAe,IAFF,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAGxCF,aAAgB,WACZ,IAAMG,EAAe,IACrBC,gBAAgBd,EAAMe,SAASJ,QAC/BC,EAAUC,EAAaG,IAAI,WAAa,MACrC,IAaP,OACI,0BAAQf,UAAU,UACd,uBAAKA,UAAU,oBACX,yBAAOgB,KAAK,SAASC,YAAY,SAChCC,MAAOR,EAAQS,SAfG,SAACC,GAExBT,EAAUS,EAAEC,cAAcH,QActBI,UAXoB,SAACF,GAEX,UAAVA,EAAEG,KACFxB,EAAMyB,QAAQC,KAAd,2BAAuCf,OASvC,gBAAC,EAAD,CAAeT,MAAOF,EAAMM,eAEpC,uBAAKqB,IAAKC,IAAM3B,UAAU,cAAc4B,IAAI,SAC5C,sBAAI5B,UAAU,gBAAd,cACA,2BACI,gBAAC,IAAD,CAAS6B,GAAG,YAAYC,gBAAgB,qBAAqB9B,UAAU,cAAvE,YAEA,gBAAC,IAAD,CAAS6B,GAAG,SAASC,gBAAgB,qBAAqB9B,UAAU,eAApE,SACA,gBAAC,IAAD,CAAS6B,GAAG,aAAaC,gBAAgB,qBAAqB9B,UAAU,eAAxE,oB,wBC9CC+B,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEAChBC,EAAK,KADW,cAEhBC,EAAgB5B,EAAS6B,QAAO,SAAAC,GAAQ,OAAIA,EAASL,KAAOA,KAF5C,kBAGU,IAAzBG,EAAc3B,OAAe,KAAQ2B,EAAc,IAHpC,2CAAH,sDAMVG,EAAe,uCAAG,sBAAAL,EAAA,sEACrB,IADqB,gCAEpB1B,GAFoB,2CAAH,qDAKf2B,EAAO,SAACK,GACjB,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAQF,OAgBxChC,EAAsB,CAC/B,CACIoC,YACI,mFACJX,GAAI,EACJY,KAAM,eACNC,MAAO,EACPC,QAAS,CAAC,CACFC,QAAS,yCACTC,SAAU,SAEV,CAAED,QAAS,wCAAyCC,SACpD,WACV,CACEL,YAAa,oDACbX,GAAI,EACJY,KAAM,cACNC,MAAO,GACPC,QAAS,CAAC,CAACC,QAAS,8DACZC,SAAU,SAEV,CACAD,QAAS,8DACTC,SAAU,WAEpB,CACEL,YAAa,2DACbX,GAAI,EACJY,KAAM,eACNC,MAAO,GACPC,QAAS,CAAC,CACFC,QAAS,yCACTC,SAAU,SAEV,CACAD,QAAS,kDACTC,SAAU,a,SH9DdnD,K,yBAAAA,E,2BAAAA,E,gCAAAA,M,KIQZ,IAAMoD,EAAgD,WAClD,MAAO,CACHjC,KAAKnB,EAAoBqD,U,QCOlBC,EAbI,SACfC,GADe,OAEa,gBAAGH,EAAH,EAAGA,QAAYlD,EAAf,kCAC5BkD,EACA,uBAAKjD,UAAU,kBACf,uBAAKA,UAAU,sBACf,uBAAKA,UAAU,oBAIf,gBAACoD,EAAcrD,KCmBJoD,KAxBuB,SAAApD,GAClC,IAAMW,EAASX,EAAMW,OACrB,OACI,sBAAIV,UAAU,gBACTD,EAAMQ,SAAS8C,KAAI,SAAAC,GAEhB,OACK5C,GAAWA,GACZ4C,EAAQV,KAAKW,cACZC,QAAQ9C,EAAO6C,gBAAkB,EAG7B,sBAAIhC,IAAK+B,EAAQtB,GAAIhC,UAAU,qBAC5B,gBAAC,IAAD,CAAM6B,GAAE,oBAAeyB,EAAQtB,KAAOsB,EAAQV,OAK/C,YCbrBa,E,kLAEEC,KAAK3D,MAAM4D,gB,+BAIV,IACMjD,EADe,IAAIG,gBAAgB6C,KAAK3D,MAAMe,SAASJ,QACjCK,IAAI,WAAa,GAC9C,OACI,uBAAKf,UAAU,kBACf,gGAIA,gBAAC,EAAD,CACCO,SAAUmD,KAAK3D,MAAMQ,SACrB0C,QAASS,KAAK3D,MAAMkD,QACpBvC,OAAQA,S,GAjBMD,aAoCZN,eAZS,SAACC,GACrB,MAAO,CACH6C,QAAQ7C,EAAMG,SAASqD,gBACvBrD,SAASH,EAAMG,SAASA,aAGL,SAACsD,GACxB,MAAO,CACHF,YAAc,kBAAME,EH7BhB,uCAAO,WAAOA,GAAP,eAAA5B,EAAA,6DACN4B,EAASZ,KADH,SAEiBa,IAFjB,cAEAvD,EAFA,yBAGCsD,EAAS,CACZtD,WACAS,KAAKnB,EAAoBkE,UALvB,2CAAP,2DGiCG5D,CAA4CsD,G,OC9CrDO,EAAcvD,gBAAkC,IAYhDwD,E,kDACF,WAAmBlE,GAAU,IAAD,8BACxB,cAAMA,IAOFmE,eAAiB,SAACtB,EAAYuB,GAClC,EAAKC,SAAS,CAACC,WAAWzB,EAAK0B,cAAcH,KAP7C,EAAKI,MAAQ,CACTF,WAAW,GACXC,cAAc,MAJM,E,qDA6CxB,OACI,gBAACN,EAAYQ,SAAb,CACCtD,MAAO,CACHmD,WAAWX,KAAKa,MAAQb,KAAKa,MAAMF,WAAW,GAC9CH,eAAeR,KAAKQ,iBAErB,sBAAIlE,UAAU,QACT0D,KAAK3D,MAAM0E,UAEhB,2BAAMf,KAAKa,OAASb,KAAKa,MAAMD,oB,GAvD5B7D,aAAbwD,EAaYS,IAA4B,SAAA3E,GAAK,OAC3C,gBAACiE,EAAYW,SAAb,MACI,SAACC,GACE,IAAIA,EAAQP,YAActE,EAAM8E,eACzBD,EAAQV,eAEP,OADAU,EAAQV,eAAenE,EAAM6C,KAAK7C,EAAM0E,UACjC,KAIf,IAAMJ,EAAaO,EAAQP,WAC3BO,EAAQP,WAAatE,EAAM8E,cAC3B9E,EAAM6C,KAAO,GAQb,OACI,sBACC5C,UAAWD,EAAM6C,OAASyB,EAAa,SAAW,GAClDS,QATkB,SAAC1D,GACjBwD,EAAQV,gBACPU,EAAQV,eAAenE,EAAM6C,KAAK7C,EAAM0E,YAQtC1E,EAAMgF,eAwBhBd,IC7DVe,ED6DUf,ICjETgB,EAAgC,CAClCC,MAAM,EACNC,SAAS,O,SAERH,K,aAAAA,M,KASL,ICzBYI,EDyBNC,EAAU,WACkB,IADjBd,EACgB,uDADKU,EAC3BK,EAAsB,uCAClB,OAAOA,EAAOtE,MACV,KAAKgE,EAAgBO,KACjB,OAAO,2BAAIhB,GAAX,IAAiBW,MAAMX,EAAMW,MAAQ,EAAEC,SAASG,EAAOE,MAC1D,QACA,OAAOjB,IAqEZpB,KA/DmB,SAACpD,GAAW,IACnCuD,EAAoBvD,EAApBuD,QAAQmC,EAAY1F,EAAZ0F,SAD0B,EAKrChF,aAAiB4E,EAAQJ,GALY,0BAGjCC,EAHiC,EAGjCA,MAAMC,EAH2B,EAG3BA,SAAUtB,EAHiB,KAUzC,IAAIP,EACA,OAAO,KAKX,OACI,gCACI,0BAAKA,EAAQV,MACb,gBAAC,EAAD,KACI,gBAAC,EAAK8B,IAAN,CAAU9B,KAAK,cACdiC,eAAe,EACfE,QAAS,kBAAM,0CACX,yBAAIzB,EAAQX,cAEjB,gBAAC,EAAK+B,IAAN,CAAU9B,KAAK,SACdmC,QAAS,iBAAM,YAEZ,sBAAI/E,UAAU,mBAENsD,EAAQR,QAAQO,KAAI,SAAAqC,GAAM,OACtB,sBAAInE,IAAKmE,EAAO1C,UACZ,6BAAK0C,EAAO3C,QAAZ,KADJ,MACiC2C,EAAO1C,gBAO5D,qBAAGhD,UAAU,iBACR,IAAI2F,KAAKC,aAAa,QAAS,CAChCC,SAAU,MAAOC,MAAO,aACzBC,OAAOzC,EAAQT,SAEjB4C,GACD,0BAAQX,QAtCO,WACnB/E,EAAMiG,kBAqCF,iBAGD,uBAAKhG,UAAU,kBAEPkF,EAAQ,GACR,yDAA6BA,EAA7B,qBAA+CC,IAG/C,0BAAQL,QAzCC,WACpBjB,EAAS,CAAC7C,KAAKgE,EAAgBO,KAAMC,IAAI,IAAIS,SAyC7Bf,EAAQ,EAAI,aAAe,c,SC5FvCE,K,kBAAAA,M,KCCL,ICgBDc,E,4MAUMC,eAAiB,WAClB,EAAKpG,MAAMuD,SACV,EAAKvD,MAAMqG,YAAY,EAAKrG,MAAMuD,U,EAGlC+C,eAAiB,iBAAM,uD,kEAZ3B,GAAG3C,KAAK3D,MAAMuG,MAAMC,OAAOvE,GAAG,CAC1B,IAAMA,EAAYwE,SAAS9C,KAAK3D,MAAMuG,MAAMC,OAAOvE,GACnD,IACA0B,KAAK3D,MAAMgC,WAAWC,M,+BAYd,IACLsB,EAAWI,KAAK3D,MAAhBuD,QACP,OACI,uBAAKtD,UAAU,kBACX,gBAAC,IAAD,CAAQyG,MAAO/C,KAAK3D,MAAM2G,MAC1BC,QAASjD,KAAK2C,iBAEV/C,GAAWI,KAAK3D,MAAMkD,QAClB,gBAAC,EAAD,CACAA,QAASS,KAAK3D,MAAMkD,QACpBK,QAASA,EACTmC,SAAU/B,KAAK3D,MAAM2G,MACrBV,cAAetC,KAAKyC,iBAGpB,sD,GAjCE1F,aA2DXN,eAXS,SAACC,GACrB,MAAO,CACHwG,eAAexG,EAAME,OAAOC,SAC5B0C,QAAQ7C,EAAMG,SAASqD,gBACvBN,QAAQlD,EAAMG,SAASsG,qBAAkBC,EACzCJ,MAAOtG,EAAME,OAAOC,SAASwG,MACzB,SAAAC,GAAC,QAAI5G,EAAMG,SAASsG,gBACpBG,EAAEhF,KAAO5B,EAAMG,SAASsG,eAAe7E,UAdxB,SAAC6B,GACxB,MAAO,CACHuC,YAAY,SAAC9C,GAAD,OACRO,ED5De,SAACP,GAAD,MAAoC,CAC3DA,UACAtC,KAAKoE,EAAkB6B,KC0DNb,CAAY9C,KACzBvB,WAAW,SAACC,GAAD,OAAe6B,ERlCI,SAAC7B,GAC/B,8CAAO,WAAO6B,GAAP,eAAA5B,EAAA,6DACH4B,EAASZ,KADN,SAEmBiE,EAAkBlF,GAFrC,OAEGsB,EAFH,OAGHO,EAAS,CACLP,UACAtC,KAAKnB,EAAoBsH,YAL1B,2CAAP,sDQiCmCpF,CAAWC,QAcvC7B,CAA4C+F,GCrExCkB,EARU,WACzB,OACA,uBAAKpH,UAAU,kBACf,mCACA,oD,QCKSqH,EAAuB,SAACC,EAAiBC,GAAlB,YAETT,IAAtBS,EAAOD,IAAkD,OAAtBC,EAAOD,IACpB,KAAtBC,EAAOD,GAAqB,yBAA2B,IAE/CE,EAAwB,SAACF,EAAiBC,EACnD/G,GADiC,OAE7B+G,EAAOD,IAAcC,EAAOD,GAAW9G,OAASA,EAAhD,gCAC2BA,EAD3B,cACgD,IA4ClDiH,EAAchH,gBAAkC,CAClD8G,OAAO,GACPG,OAAO,KAGEC,EAAb,kDACI,WAAY5H,GAAkB,IAAD,uBACzB,cAAMA,IAsEF6H,SAAW,SAACN,EAAiBpG,GACjC,IAAM2G,EAAS,2BAAO,EAAKtD,MAAMgD,QAAlB,kBAA0BD,EAAWpG,IACpD,EAAKkD,SAAS,CAACmD,OAAOM,KAzEG,EA4ErBC,SAAU,SAACR,EAAiBpG,GAChC,IAAM6G,EAAQ,EAAKhI,MAAMiI,gBAAgBV,GACnCI,EAAkB,GACxB,QAAaZ,IAAViB,EAAqB,OAAOL,EAC/B,GAAGO,MAAMC,QAAQH,GACbA,EAAM1E,KAAI,SAAA0E,GACN,IAAMI,EAAQJ,EAAMK,UAChBd,EAAU,EAAK/C,MAAMgD,OAAOQ,EAAMM,MACnCF,GACCT,EAAOjG,KAAK0G,UAGnB,CACD,IAAMA,EAAQJ,EAAMK,UAChBd,EAAU,EAAK/C,MAAMgD,OAAOQ,EAAMM,MAC/BF,GACCT,EAAOjG,KAAK0G,GAGxB,IAAMG,EAAS,2BAAO,EAAK/D,MAAMmD,QAAlB,kBAA2BJ,EAAWI,IAErD,OADA,EAAKtD,SAAS,CAACsD,OAAOY,IACfZ,GAjGkB,EAkHrBa,aAlHqB,uCAkHN,WAAOnH,GAAP,eAAAa,EAAA,yDACnBb,EAAEoH,kBACC,EAAKC,mBAFW,uBAGf,EAAKrE,SAAS,CAACsE,YAAW,IAHX,SAIM,EAAK3I,MAAM4I,SAAS,EAAKpE,MAAMgD,QAJrC,OAITqB,EAJS,OAKf,EAAKxE,SAAS,CACVsD,OAAOkB,EAAOlB,QAAU,GACxBmB,UAAUD,EAAOE,QACjBJ,YAAW,IACb,WACE,GAAG,EAAKnE,MAAMsE,UAAU,CACpB,IAAMtB,EAASwB,OAAOC,KAAK,EAAKzE,MAAMgD,QAAQ0B,QAAO,SAAChH,EAAEiH,GAEpD,OADAjH,EAAEiH,GAAK,GACA,eAAIjH,KACb,IACF,EAAKmC,SAAS,CACVmD,OAAOA,QAhBJ,uBAqBf4B,MAAM,2BArBS,4CAlHM,sDAEzB,IAAMzB,EAAmB,GAFA,OAGzBqB,OAAOC,KAAKjJ,EAAMqJ,cAAcC,SAAQ,SAAA/B,GACpCI,EAAOJ,GAAa,MAExB,EAAK/C,MAAQ,CACTgD,OAAOxH,EAAMqJ,aACb1B,SACAmB,WAAU,EACVH,YAAW,GAVU,EADjC,+DAoGwC,IAAD,OACzBhB,EAAiB,GACnB4B,GAAmB,EAUvB,OATAP,OAAOC,KAAKtF,KAAK3D,MAAMqJ,cAAc/F,KAAI,SAAAiE,GACrCI,EAAOJ,GAAa,EAAKQ,SACrBR,EAAU,EAAK/C,MAAMgD,OAAOD,IAE7BI,EAAOJ,GAAW9G,OAAS,IAC1B8I,GAAY,EACZ,EAAKlF,SAAS,CAACsD,eAGhB4B,IAhHf,+BA6IQ,IAAM1E,EAAuB,CACzB2C,OAAO7D,KAAKa,MAAMgD,OAClBK,SAASlE,KAAKkE,SACdF,OAAOhE,KAAKa,MAAMmD,OAClBI,SAASpE,KAAKoE,UAElB,OACI,gBAACL,EAAYjD,SAAb,CAAsBtD,MAAO0D,GACzB,wBAAM+D,SAAUjF,KAAK6E,aAAcvI,UAAU,OAAOuJ,YAAY,GAC3D7F,KAAK3D,MAAM0E,SACZ,uBAAKzE,UAAU,cACX,0BAAQwJ,SAAU9F,KAAKa,MAAMmE,YAAchF,KAAKa,MAAMsE,UACrD7H,KAAK,UADN,iBAxJxB,GAA0BP,aAAbkH,EAcK8B,MAA+B,SAAA1J,GAAU,IAC5C6C,EAA2B7C,EAA3B6C,KAAK8G,EAAsB3J,EAAtB2J,MAAM1I,EAAgBjB,EAAhBiB,KAAK2I,EAAW5J,EAAX4J,QAEjBC,EAAe,SACjBxI,EACAwD,GACOA,EAAQgD,UACPhD,EAAQgD,SAAS7H,EAAM6C,KAAKxB,EAAEC,cAAcH,QAGlD2I,EAAa,SACfzI,EACAwD,GACOA,EAAQkD,UACPlD,EAAQkD,SAAS/H,EAAM6C,KAAKxB,EAAEC,cAAcH,QAIxD,OACI,gBAACuG,EAAY9C,SAAb,MACK,SAAAC,GAAO,OACJ,uBAAK5E,UAAU,cACf,yBAAO8J,QAASlH,GAAO8G,IACZ,SAAT1I,GAA4B,UAATA,IACjB,yBAAOgB,GAAIY,EAAM5B,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMuC,cAC5BwG,OAAQ,SAAC3I,GAAD,OAAOyI,EAAWzI,EAAEwD,IAC5B1D,MAAO0D,EAAQ2C,OAAO3E,GAAOzB,SAAU,SAAAC,GAAC,OAAIwI,EAAaxI,EAAEwD,MAErD,aAAT5D,GACE,4BAAUgB,GAAIY,EAAMzB,SAAU,SAAAC,GAAC,OAAIwI,EAAaxI,EAAEwD,IAClDmF,OAAQ,SAAC3I,GAAD,OAAOyI,EAAWzI,EAAEwD,IAC5B1D,MAAO0D,EAAQ2C,OAAO3E,KAEf,WAAT5B,GACE,0BAAQE,MAAO0D,EAAQ2C,OAAO3E,GAC7BmH,OAAQ,SAAC3I,GAAD,OAAOyI,EAAWzI,EAAEwD,IAC5BzD,SAAU,SAAAC,GAAC,OAAIwI,EAAaxI,EAAEwD,KAC1B+E,GACDA,EAAQtG,KAAI,SAAA2G,GAAM,OACd,0BAAQzI,IAAKyI,EAAQ9I,MAAO8I,GACvBA,OAKhBpF,EAAQ8C,OAAO9E,IACdgC,EAAQ8C,OAAO9E,GAAMpC,OAAS,GAC9BoE,EAAQ8C,OAAO9E,GAAMS,KAAI,SAAA8E,GAAK,OAC1B,wBAAM5G,IAAK4G,EAAOnI,UAAU,cACvBmI,WAkG/BR,EAAK8B,MAAMQ,aAAe,CACtBjJ,KAAK,QAGM2G,QCpMAuC,EA7BqB,SAACnK,GAEjC,IAAMwI,EAAY,uCAAG,WAAOhB,GAAP,eAAAtF,EAAA,sEACIlC,EAAM4I,SAASpB,GADnB,cACXqB,EADW,yBAEVA,GAFU,2CAAH,sDAKlB,OACI,gBAAC,EAAD,CAAMQ,aAAc,CAChBxG,KAAK,GAAGuH,MAAM,GAAGC,OAAO,UAAUC,MAAM,IAE5C1B,SAAUJ,EACVP,gBAAiB,CACbmC,MAAM,CAAC/B,UAAUf,GAGjBzE,KAAK,CAAC,CAACwF,UAAUf,GAAU,CAACe,UAAUZ,EAAUa,KAAK,MAGrD,gBAAC,EAAKoB,MAAN,CAAY7G,KAAK,OAAO8G,MAAM,cAC9B,gBAAC,EAAKD,MAAN,CAAY7G,KAAK,QAAQ8G,MAAM,qBAAqB1I,KAAK,UACzD,gBAAC,EAAKyI,MAAN,CAAY7G,KAAK,SAAS8G,MAAM,gCAC/B1I,KAAK,SACL2I,QAAS,CAAC,YAAY,UAAU,WAAW,OAAO,WAClD,gBAAC,EAAKF,MAAN,CAAY7G,KAAK,QAAQ8G,MAAM,mBAAmB1I,KAAK,eCMrDsJ,G,4MArBA/B,a,uCAAe,WAAOhB,GAAP,SAAAtF,EAAA,sEACbC,EAAK,KADQ,gCAEb,CACFwF,OAAO,CACHyC,MAAM,CAAC,yBAEXrB,SAAQ,IANO,2C,6GAUtB,OACI,uBAAK9I,UAAU,kBACX,wCACA,sGAEI,gBAAC,EAAD,CAAW2I,SAAUjF,KAAK6E,oB,GAjBlB9H,aCJtB8J,GAAY9J,IAAM+J,MAAK,kBAAM,gCAezBC,G,kDACF,WAAY1K,GAA2B,IAAD,8BAClC,cAAMA,IACDwE,MAAQ,CACTmG,UAAS,GAHqB,E,qDAQlC,OACI,6BACI,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACEC,QAAS,IACTC,WAAW,UACXvJ,IAAKmC,KAAK3D,MAAMe,SAASS,KAC3B,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOwJ,OAAK,EAACC,KAAK,YACjBC,UAAWxH,IACX,kBAAC,IAAD,CAAOuH,KAAK,aAAaC,UAAWX,KACrC,kBAAC,IAAD,CAAOU,KAAK,SACXC,UAAWV,IACP7G,KAAKa,MAAMmG,SACX,kBAAC,WAAD,CAAUQ,SACP,yBAAKlL,UAAU,gBAAf,eAEA,kBAACuK,GAAD,OAEH,kBAAC,IAAD,CAAU1I,GAAG,YAElB,kBAAC,IAAD,CAAOmJ,KAAK,SAASC,UAAW7D,IAChC,kBAAC,IAAD,CAAO4D,KAAK,gBACXC,UAAW/E,IACZ,kBAAC,IAAD,CAAOiF,OAAQ,kBAAO,kBAAC,IAAD,CAAUtJ,GAAG,yB,GAlClCpB,IAAM2C,WA8ChBgI,GAtDc,WACzB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOH,UAAWR,O,kBChBxBY,GAAoC,CACtC9K,SAAS,GACTqD,iBAAgB,EAChBiD,eAAe,MCJbyE,GAAmC,CACrC/K,SAAS,ICWPgL,GAAcC,aAAmC,CACnDjL,SFLsB,WACF,IADGgE,EACJ,uDADY8G,GACvB/F,EAAW,uCACP,OAAOA,EAAOtE,MACV,KAAKnB,EAAoBqD,QACrB,OAAO,2BACAqB,GADP,IAEIX,iBAAgB,IAExB,KAAK/D,EAAoBkE,OACrB,OAAO,2BACAQ,GADP,IAEIhE,SAAS+E,EAAO/E,SAChBqD,iBAAgB,IAExB,KAAK/D,EAAoBsH,UACrB,OAAO,2BACA5C,GADP,IAEIsC,eAAevB,EAAOhC,QACtBM,iBAAgB,IAExB,QACI,OAAOW,IEf3BjE,ODV4D,WACvB,IAArCiE,EAAoC,uDAA9B+G,GAAmBhG,EAAW,uCAChC,OAAOA,EAAOtE,MACV,KAAKoE,EAAkB6B,IACnB,OAAO,2BACA1C,GADP,IAEIhE,SAASgE,EAAMhE,SAASkL,OAAOnG,EAAOhC,WAE9C,QACI,OAAOiB,GAAS+G,OEHhC,IAAMI,GAAyB,SAAA3L,GAC7B,OACE,kBAAC,IAAD,CAAUK,MAAOL,EAAMK,OACrB,kBAAC,GAAD,QAKAA,GDAYuL,aAAYJ,QAAYzE,EAAU8E,aAAgBC,OCEpEC,IAASX,OACP,kBAAC,IAAMY,WAAP,KACE,kBAAC,GAAD,CAAM3L,MAAOA,MAEf4L,SAASC,eAAe,W","file":"static/js/main.cbb9bf3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {IProduct} from \"./ProductsData\"\r\n\r\nexport enum ProductsActionTypes {\r\n    GETALL = \"PRODUCTS/GETALL\",\r\n    LOADING = \"PRODUCTS/LOADING\",\r\n    GETSINGLE = \"PRODUCTS/GETSINGLE\"\r\n}\r\n\r\nexport interface IProductsGetAllAction {\r\n    type:ProductsActionTypes.GETALL,\r\n    products:IProduct[]\r\n}\r\n\r\nexport interface IProductsLoadingAction {\r\n    type:ProductsActionTypes.LOADING\r\n}\r\nexport interface IProductsGetSingleAction {\r\n    type:ProductsActionTypes.GETSINGLE;\r\n    product:IProduct\r\n}\r\n\r\nexport type ProductsAction = |IProductsGetSingleAction | IProductsGetAllAction | IProductsLoadingAction\r\n\r\nexport interface IProductState {\r\n    readonly products:IProduct[];\r\n    readonly productsLoading:boolean;\r\n    readonly currentProduct:IProduct | null\r\n}","import * as React from \"react\"\r\n\r\ninterface IProps {\r\n    count:number;\r\n}\r\n\r\nconst BasketSummary:React.SFC<IProps> = props => {\r\n    return(\r\n        <div className=\"basket-summary\">\r\n            {props.count}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BasketSummary","import * as React from \"react\"\r\nimport {NavLink,RouteComponentProps,withRouter} from \"react-router-dom\"\r\nimport BasketSummary from \"./BasketSummary\"\r\nimport {connect} from \"react-redux\"\r\nimport {IApplicationState} from \"./Store\"\r\nimport \"url-search-params-polyfill\"\r\nimport logo from \"./logo.svg\"\r\n\r\ninterface IProps extends RouteComponentProps { \r\n    basketCount : number;\r\n}\r\n\r\nconst Header:React.SFC<IProps> = (props) => {\r\n\r\n    const [search,setSearch] = React.useState(\"\")\r\n    React.useEffect(() => {\r\n        const searchParams = new\r\n        URLSearchParams(props.location.search);\r\n        setSearch(searchParams.get(\"search\") || \"\");\r\n        }, []);\r\n\r\n        const handleSearchChange = (e:\r\n            React.ChangeEvent<HTMLInputElement>) => {\r\n            setSearch(e.currentTarget.value);\r\n        };\r\n\r\n        const handleSearchKeydown = (e:\r\n            React.KeyboardEvent<HTMLInputElement>) => {\r\n            if (e.key === \"Enter\") {\r\n                props.history.push(`/products?search=${search}`);\r\n            }\r\n        };\r\n    return(\r\n        <header className=\"header\">\r\n            <div className=\"search-container\">\r\n                <input type=\"search\" placeholder=\"search\"\r\n                 value={search} onChange={handleSearchChange}\r\n                onKeyDown={handleSearchKeydown}/>\r\n                <BasketSummary count={props.basketCount} />\r\n            </div>\r\n        <img src={logo} className=\"header-logo\" alt=\"logo\" />\r\n        <h1 className=\"header-title\">React Shop</h1>\r\n        <nav>\r\n            <NavLink to=\"/products\" activeClassName=\"header-link-active\" className=\"headerlink\">\r\n            Products</NavLink>\r\n            <NavLink to=\"/admin\" activeClassName=\"header-link-active\" className=\"header-link\">Admin</NavLink>\r\n            <NavLink to=\"/contactus\" activeClassName=\"header-link-active\" className=\"header-link\">Contact Us</NavLink>\r\n        </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst mapStateToProp = (store:IApplicationState) => {\r\n    return {\r\n        basketCount : store.basket.products.length\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProp)(Header))","export const getProduct = async (id:number) :Promise<IProduct | null> => {\r\n    await wait(1000)\r\n    const foundProducts = products.filter(customer => customer.id === id)\r\n    return foundProducts.length === 0 ? null  : foundProducts[0]\r\n}\r\n\r\nexport const getAsyncProduct = async (): Promise<IProduct[]> => {\r\n    await(1000);\r\n    return products;\r\n}\r\n\r\nexport const wait = (ms:number): Promise<void> => {\r\n    return new Promise(resolve => setTimeout(resolve,ms))\r\n}\r\n\r\nexport interface IReview {\r\n    comment:string;\r\n    reviewer:string;\r\n}\r\n\r\nexport interface IProduct {\r\n    id:number;\r\n    name:string;\r\n    description:string;\r\n    price:number;\r\n    reviews:IReview[];\r\n}\r\n\r\nexport const products:IProduct[] = [\r\n    {\r\n        description:\r\n            \"A collection of navigational components that compose declaratively with your app\",\r\n        id: 1,\r\n        name: \"React Router\",\r\n        price: 8,\r\n        reviews: [{\r\n                comment: \"Excellent! This does everything I want\",\r\n                reviewer: \"Billy\"\r\n                },\r\n                { comment: \"The best router I've ever worked with\", reviewer:\r\n                \"Sally\" }]\r\n    },{\r\n        description: \"A library that helps manage state across your app\",\r\n        id: 2,\r\n        name: \"React Redux\",\r\n        price: 12,\r\n        reviews: [{comment: \"I've found this really useful in a large app I'm working on\",\r\n                reviewer: \"Billy\"\r\n                },\r\n                {\r\n                comment: \"A bit confusing at first but simple when you get used to it\",\r\n                reviewer: \"Sally\"\r\n                }]\r\n    },{\r\n        description: \"A library that helps you interact with a GraphQL backend\",\r\n        id: 3,\r\n        name: \"React Apollo\",\r\n        price: 12,\r\n        reviews: [{\r\n                comment: \"I'll never work with a REST API again!\",\r\n                reviewer: \"Billy\"\r\n                },\r\n                {\r\n                comment: \"It makes working with GraphQL backends a breeze\",\r\n                reviewer: \"Sally\"\r\n                }]\r\n      }\r\n]","import {ActionCreator,AnyAction,Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nimport {getAsyncProduct as getProductsFromAPI,\r\n      getProduct as getProductFromAPI} from \"./ProductsData\"\r\n\r\nimport {IProductsGetAllAction,IProductsLoadingAction\r\n       ,IProductState,ProductsActionTypes,IProductsGetSingleAction\r\n    } from \"./ProductsTypes\"\r\n\r\nconst loading:ActionCreator<IProductsLoadingAction> = () => {\r\n    return {\r\n        type:ProductsActionTypes.LOADING\r\n    }\r\n}\r\n\r\nexport const getProducts:\r\n        ActionCreator<ThunkAction<Promise<AnyAction>,\r\n        IProductState,null,IProductsGetAllAction>> = () => {\r\n            return async (dispatch:Dispatch) => {\r\n             dispatch(loading())\r\n             const products = await getProductsFromAPI()\r\n             return dispatch({\r\n                 products,\r\n                 type:ProductsActionTypes.GETALL\r\n             })   \r\n            }\r\n}\r\n\r\nexport const getProduct:ActionCreator<ThunkAction<Promise<any>,IProductState,\r\n    null,IProductsGetSingleAction>> = (id:number) =>{\r\n        return async (dispatch :Dispatch) => {\r\n            dispatch(loading())\r\n            const product = await getProductFromAPI(id)\r\n            dispatch({\r\n                product,\r\n                type:ProductsActionTypes.GETSINGLE\r\n            })\r\n        }\r\n    }\r\n    ","import * as React from \"react\"\r\n\r\ninterface IProps {\r\n    loading:boolean;\r\n}\r\n\r\nconst withLoader = <P extends object>(\r\n    Component: React.ComponentType<P>\r\n    ): React.SFC<P & IProps> => ({ loading, ...props }: IProps) =>\r\n    loading ? (\r\n    <div className=\"loader-overlay\">\r\n    <div className=\"loader-circle-wrap\">\r\n    <div className=\"loader-circle\" />\r\n    </div>\r\n    </div>\r\n    ) : (\r\n    <Component {...props as P} />\r\n    );    \r\n    \r\nexport default withLoader","import * as React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {IProduct} from \"./ProductsData\"\r\nimport withLoader from \"./WithLoader\"\r\n\r\n\r\ninterface IProps {\r\n    products:IProduct[];\r\n    search:string;\r\n}\r\n\r\nconst ProductList:React.SFC<IProps> = props => {\r\n    const search = props.search;\r\n    return(\r\n        <ul className=\"product-list\">\r\n            {props.products.map(product => {\r\n                // Refactor This Later\r\n                if (\r\n                    !search || (search &&\r\n                    product.name.toLowerCase()\r\n                    .indexOf(search.toLowerCase()) > -1)\r\n                    ) {\r\n                    return (\r\n                         <li key={product.id} className=\"product-list-item\">\r\n                            <Link to={`/products/${product.id}`}>{product.name}\r\n                            </Link>\r\n                         </li>\r\n                           );\r\n                       } else {\r\n                    return null;\r\n                   }\r\n                })}\r\n            </ul>\r\n    )}\r\n\r\nexport default withLoader(ProductList)","import * as React from \"react\"\r\nimport {IProduct} from \"./ProductsData\"\r\nimport {RouteComponentProps} from \"react-router-dom\"\r\nimport \"url-search-params-polyfill\"\r\n\r\nimport {connect} from \"react-redux\"\r\nimport {IApplicationState} from \"./Store\"\r\nimport {getProducts} from \"./ProductsAction\"\r\nimport ProductList from \"./ProductList\"\r\n\r\ninterface IProps extends RouteComponentProps { \r\n    getProducts:typeof getProducts;\r\n    loading:boolean;\r\n    products:IProduct[]\r\n}\r\n\r\nclass ProductsPage extends React.Component<IProps> {    \r\n    public componentDidMount(){\r\n        this.props.getProducts()\r\n    }\r\n\r\n    public render(){\r\n         const searchParams = new URLSearchParams(this.props.location.search)\r\n         const search = searchParams.get(\"search\") || \"\"\r\n        return (\r\n            <div className=\"page-container\">\r\n            <p>\r\n            Welcome to React Shop where you can get all your tools\r\n            for ReactJS!\r\n            </p>\r\n            <ProductList \r\n             products={this.props.products}\r\n             loading={this.props.loading}\r\n             search={search}\r\n             />\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store :IApplicationState) => {\r\n    return {\r\n        loading:store.products.productsLoading,\r\n        products:store.products.products\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        getProducts : () => dispatch(getProducts())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ProductsPage);","import * as React from \"react\"\r\n\r\ninterface ITabsContext{\r\n    activeName?:string;\r\n    handleTabClick?:(e:string,a:any) => void;\r\n}\r\nconst TabsContext = React.createContext<ITabsContext>({})\r\n\r\ninterface ITabsProps {\r\n    name:string;\r\n    initialActive?:boolean;\r\n    heading:() => string | JSX.Element\r\n}\r\ninterface IState {\r\n    activeName:string;\r\n    activeContent:React.ReactNode;\r\n}\r\n\r\nclass Tabs extends React.Component<{},IState>{\r\n    public constructor(props:{}){\r\n        super(props)\r\n        this.state = {\r\n            activeName:\"\",\r\n            activeContent:null\r\n        }\r\n    }\r\n\r\n    private handleTabClick = (name:string,content:React.ReactNode) => {\r\n        this.setState({activeName:name,activeContent:content})\r\n    }\r\n    \r\n    public static Tab:React.SFC<ITabsProps> = props => (\r\n        <TabsContext.Consumer>\r\n           {(context:ITabsContext) => {\r\n               if(!context.activeName && props.initialActive){\r\n                   if(context.handleTabClick){\r\n                       context.handleTabClick(props.name,props.children)\r\n                       return null\r\n                   }\r\n               }\r\n\r\n               const activeName = context.activeName ? \r\n               context.activeName : props.initialActive ?\r\n               props.name : \"\";\r\n\r\n               const handleTabClick = (e:React.MouseEvent<HTMLLIElement>) => {\r\n                   if(context.handleTabClick){\r\n                       context.handleTabClick(props.name,props.children)\r\n                   }\r\n               }\r\n\r\n               return(\r\n                   <li\r\n                    className={props.name === activeName ? \"active\" : \"\"}\r\n                    onClick={handleTabClick}>\r\n                        {props.heading()}\r\n                   </li>\r\n               )\r\n           }}\r\n        </TabsContext.Consumer>\r\n    ) \r\n\r\n\r\n    public render(){\r\n        return(\r\n            <TabsContext.Provider \r\n             value={{\r\n                 activeName:this.state ? this.state.activeName:\"\",\r\n                 handleTabClick:this.handleTabClick\r\n             }}>\r\n                <ul className=\"tabs\">\r\n                    {this.props.children}\r\n                </ul>\r\n                <div>{this.state && this.state.activeContent}</div>\r\n            </TabsContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tabs","import * as React from \"react\"\r\nimport {IProduct} from \"./ProductsData\"\r\nimport Tabs from \"./Tabs\"\r\nimport withLoader from \"./WithLoader\"\r\n\r\ninterface IProps{\r\n    product?:IProduct;\r\n    inBasket:boolean;\r\n    onAddToBasket: () => void;\r\n}\r\ninterface ILikeState {\r\n    likes:number;\r\n    lastLike:Date | null;\r\n}\r\nconst initialLikeState : ILikeState = {\r\n    likes:0,\r\n    lastLike:null\r\n}\r\nenum LikeActionTypes {\r\n    LIKE = \"LIKE\"\r\n}\r\ninterface ILikeAction {\r\n    type:LikeActionTypes.LIKE;\r\n    now:Date;\r\n}\r\ntype LikeAction = ILikeAction;\r\n\r\nconst reducer = (state : ILikeState = initialLikeState,\r\n           action:LikeAction) => {\r\n               switch(action.type) {\r\n                   case LikeActionTypes.LIKE:\r\n                       return {...state,likes:state.likes + 1,lastLike:action.now};\r\n                    default: \r\n                    return state;\r\n               }\r\n}\r\n\r\n\r\n\r\nconst Product:React.SFC<IProps> = (props) => {\r\n    const {product,inBasket} = props\r\n    \r\n    const [{likes,lastLike},dispatch]:[\r\n        ILikeState,(action:ILikeAction) => void \r\n    ] = React.useReducer(reducer,initialLikeState)\r\n    \r\n    const handleAddClick = () => {\r\n        props.onAddToBasket()\r\n    }\r\n    if(!product){\r\n        return null\r\n    }\r\n    const handleLikeClick = () => {\r\n        dispatch({type:LikeActionTypes.LIKE, now:new Date()})\r\n    }\r\n    return(\r\n        <>\r\n            <h1>{product.name}</h1>\r\n            <Tabs>\r\n                <Tabs.Tab name=\"Description\" \r\n                 initialActive={true} \r\n                 heading={() => <b>Description</b>}>\r\n                     <p>{product.description}</p>\r\n                 </Tabs.Tab>\r\n                <Tabs.Tab name=\"Review\"\r\n                 heading={() => \"Reviews\"}\r\n                >\r\n                    <ul className=\"product-reviews\">\r\n                        {\r\n                            product.reviews.map(review => (\r\n                                <li key={review.reviewer}>\r\n                                    <i>\"{review.comment}\"</i> - {review.reviewer}\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </Tabs.Tab>\r\n            </Tabs>\r\n            <p className=\"product-price\">\r\n                {new Intl.NumberFormat(\"en-US\", {\r\n                currency: \"USD\", style: \"currency\"\r\n            }).format(product.price)}\r\n            </p>\r\n           {!inBasket && (\r\n            <button onClick={handleAddClick}>Add to\r\n            basket</button>\r\n           )}\r\n           <div className=\"like-container\">\r\n               {\r\n                   likes > 0 && (\r\n                   <div>{`I like this product ${likes}, last at ${lastLike}`}</div>\r\n                   )}\r\n\r\n                   <button onClick={handleLikeClick}>\r\n                       {likes > 0 ? \"Like Again\" : \"Like\"}\r\n                   </button>\r\n               \r\n           </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withLoader(Product);","import {IProduct} from \"./ProductsData\";\r\n\r\nexport enum BasketActionTypes {\r\n    ADD = \"BASKET/ADD\"\r\n}\r\n\r\nexport interface IBasketState {\r\n    readonly products : IProduct[];\r\n}\r\n\r\nexport interface IBasketAdd { \r\n    type:BasketActionTypes.ADD;\r\n    product:IProduct\r\n}\r\n\r\nexport type BasketAction = IBasketAdd;","import {BasketActionTypes,IBasketAdd} from \"./BasketTypes\"\r\nimport {IProduct} from \"./ProductsData\"\r\n\r\nexport const addToBasket = (product:IProduct) : IBasketAdd => ({\r\n    product,\r\n    type:BasketActionTypes.ADD\r\n})","import * as React from \"react\";\r\nimport {RouteComponentProps,Prompt} from 'react-router-dom'\r\nimport {IProduct} from \"./ProductsData\"\r\nimport Product from \"./Product\"\r\n\r\nimport {connect} from \"react-redux\"\r\nimport {addToBasket} from \"./BasketAction\"\r\nimport {getProduct} from \"./ProductsAction\"\r\nimport {IApplicationState} from \"./Store\"\r\n\r\ninterface IProps extends RouteComponentProps<{id:string}>{\r\n    addToBasket:typeof addToBasket;\r\n    getProduct:typeof getProduct;\r\n    product?:IProduct;\r\n    added:boolean,\r\n    loading:boolean\r\n}\r\n\r\n\r\nclass ProductPage extends React.Component<IProps> {\r\n    \r\n    public componentDidMount(){\r\n        if(this.props.match.params.id){\r\n            const id:number = parseInt(this.props.match.params.id,\r\n            10);\r\n            this.props.getProduct(id)\r\n            }\r\n    }\r\n\r\n    private handleAddClick = () =>{\r\n        if(this.props.product){\r\n            this.props.addToBasket(this.props.product)\r\n        }\r\n    }\r\n    private navAwayMessage = () => \"Are you sure you leave without buying this product?\";\r\n\r\n\r\n    public render(){\r\n        const {product} = this.props;\r\n        return(\r\n            <div className=\"page-container\">\r\n                <Prompt when={!this.props.added}\r\n                message={this.navAwayMessage} />\r\n                {\r\n                    product || this.props.loading ? (\r\n                        <Product\r\n                        loading={this.props.loading}\r\n                        product={product}\r\n                        inBasket={this.props.added}\r\n                        onAddToBasket={this.handleAddClick}\r\n                        />\r\n                       ):(\r\n                        <p>Product Not Found!!!</p>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        addToBasket:(product:IProduct) => \r\n            dispatch(addToBasket(product)),\r\n        getProduct:(id:number) => dispatch(getProduct(id))         \r\n    }\r\n}\r\nconst mapStateToProps = (store:IApplicationState) => {\r\n    return {\r\n        basketProducts:store.basket.products,\r\n        loading:store.products.productsLoading,\r\n        product:store.products.currentProduct || undefined,\r\n        added :store.basket.products.some(\r\n            p => store.products.currentProduct ?\r\n            p.id === store.products.currentProduct.id :false)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ProductPage)","import * as React from \"react\";\r\nconst LoginPage: React.SFC = () => {\r\n    return (\r\n    <div className=\"page-container\">\r\n    <h1>Login</h1>\r\n    <p>You need to login ...</p>\r\n    </div>\r\n    );\r\n    };\r\n    export default LoginPage;","import * as React from \"react\";\r\n\r\nexport interface IValues {\r\n    [key:string]:any;\r\n}\r\n\r\nexport interface ISubmitResult {\r\n    success:boolean;\r\n    errors?:IErrors;\r\n}\r\nexport const required : Validator = (fieldName:string,values:IValues):\r\n   string => (\r\n     values[fieldName] === undefined || values[fieldName] === null || \r\n     values[fieldName] === \"\" ?  \"This must be populated\" : \"\"\r\n);\r\nexport const minLength : Validator = (fieldName:string,values:IValues,\r\n    length:number ):string => (\r\n        values[fieldName] && values[fieldName].length < length\r\n        ? `This must be at least ${length} character` : \"\"\r\n);\r\n\r\ninterface IErrors {\r\n    [key:string]:string[];\r\n}\r\n\r\ntype Validator = (\r\n    fieldName:string,\r\n    values:IValues,\r\n    args?:any\r\n) => string\r\ninterface IValidation {\r\n    validator:Validator;\r\n    args?:any\r\n}\r\ninterface IValidationProp {\r\n    [key:string]:IValidation | IValidation[]\r\n}\r\n\r\ninterface IFormProps{\r\n    defaultValue:IValues;\r\n    validationRules:IValidationProp;\r\n    onSubmit : (values:IValues) => Promise<ISubmitResult>\r\n}\r\ninterface IState {\r\n    values:IValues;\r\n    errors:IErrors;\r\n    submitting:boolean;\r\n    submitted:boolean;\r\n}\r\n        \r\ninterface IFieldProps {\r\n    name:string;\r\n    label:string;\r\n    type?:\"Text\" | \"Email\" | \"Select\" | \"TextArea\";\r\n    options?:string[]\r\n}\r\ninterface IFormContext {\r\n    errors:IErrors;\r\n    values:IValues;\r\n    setValue?:(fieldName:string,value:any) => void;\r\n    validate?:(fieldName:string,value:any) => string[]\r\n}\r\nconst FormContext = React.createContext<IFormContext>({\r\n    values:{},\r\n    errors:{}\r\n})\r\n\r\nexport class Form extends React.Component<IFormProps,IState>{\r\n    constructor(props:IFormProps){\r\n        super(props)\r\n        const errors : IErrors = {};\r\n        Object.keys(props.defaultValue).forEach(fieldName => {\r\n            errors[fieldName] = []\r\n        })\r\n        this.state = {\r\n            values:props.defaultValue,\r\n            errors,\r\n            submitted:false,\r\n            submitting:false\r\n        };\r\n    }\r\n    public static Field:React.SFC<IFieldProps> = props => {\r\n        const {name,label,type,options} = props\r\n\r\n        const handleChange = (\r\n            e:React.ChangeEvent< | HTMLInputElement | HTMLTextAreaElement |HTMLSelectElement>,\r\n            context:IFormContext) => {\r\n                if(context.setValue){\r\n                    context.setValue(props.name,e.currentTarget.value)\r\n                }\r\n            }\r\n        const handleBlur = (\r\n            e:React.FocusEvent< | HTMLInputElement | HTMLTextAreaElement |HTMLSelectElement>,\r\n            context:IFormContext) => {\r\n                if(context.validate){\r\n                    context.validate(props.name,e.currentTarget.value)\r\n                }\r\n            }\r\n\r\n        return(\r\n            <FormContext.Consumer>\r\n                {context => (\r\n                    <div className=\"form-group\">\r\n                    <label htmlFor={name}>{label}</label>\r\n                    {(type === \"Text\" || type === \"Email\") && (\r\n                        <input id={name} type={type?.toLowerCase()}\r\n                         onBlur={(e) => handleBlur(e,context)}\r\n                         value={context.values[name]} onChange={e => handleChange(e,context)}/>\r\n                    )}\r\n                    {(type === \"TextArea\" && (\r\n                        <textarea id={name} onChange={e => handleChange(e,context)}\r\n                        onBlur={(e) => handleBlur(e,context)}\r\n                        value={context.values[name]}/>\r\n                    ))}\r\n                    {(type === \"Select\" && (\r\n                        <select value={context.values[name]}\r\n                         onBlur={(e) => handleBlur(e,context)}\r\n                         onChange={e => handleChange(e,context)}>\r\n                            {options &&\r\n                            options.map(option => (\r\n                                <option key={option} value={option} >\r\n                                    {option}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    ))}\r\n                    {context.errors[name] && \r\n                      context.errors[name].length > 0 &&\r\n                      context.errors[name].map(error => (\r\n                          <span key={error} className=\"form-error\">\r\n                              {error}\r\n                          </span>\r\n                      ))}\r\n                </div>\r\n                )}\r\n            </FormContext.Consumer>\r\n        )\r\n    }\r\n\r\n    private setValue = (fieldName:string,value:any) => {\r\n        const newValues = {...this.state.values,[fieldName]:value}\r\n        this.setState({values:newValues})\r\n    }\r\n\r\n    private validate =(fieldName:string,value:any):string[]=>{\r\n        const rules = this.props.validationRules[fieldName]\r\n        const errors:string[] = [];      \r\n        if(rules === undefined) return errors;\r\n        if(Array.isArray(rules)){\r\n            rules.map(rules => {\r\n                const error = rules.validator(\r\n                    fieldName,this.state.values,rules.args)\r\n                if(error){\r\n                    errors.push(error)\r\n                }\r\n            })\r\n        }else{\r\n            const error = rules.validator(\r\n                fieldName,this.state.values,rules.args);\r\n                if(error){\r\n                    errors.push(error)\r\n                }\r\n        }\r\n        const newErrors = {...this.state.errors ,[fieldName]:errors}\r\n        this.setState({errors:newErrors})\r\n        return errors\r\n    }\r\n    private isValidForSubmit():boolean {\r\n        const errors:IErrors = {};\r\n        let hasError:boolean = true;\r\n        Object.keys(this.props.defaultValue).map(fieldName => {\r\n            errors[fieldName] = this.validate(\r\n                fieldName,this.state.values[fieldName]\r\n            );\r\n            if(errors[fieldName].length > 0){\r\n                hasError =  false;\r\n                this.setState({errors})\r\n            }\r\n        })\r\n        return hasError\r\n    }\r\n\r\n    private handleSubmit = async (e:React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        if(this.isValidForSubmit()){\r\n            this.setState({submitting:true})\r\n            const result = await this.props.onSubmit(this.state.values)\r\n            this.setState({\r\n                errors:result.errors || {},\r\n                submitted:result.success,\r\n                submitting:false\r\n            },() => {\r\n                if(this.state.submitted){\r\n                    const values = Object.keys(this.state.values).reduce((a,b) => {\r\n                        a[b] = \"\"\r\n                        return {...a}\r\n                    },{})\r\n                    this.setState({\r\n                        values:values\r\n                    })\r\n                }\r\n            })\r\n        }else{\r\n            alert(\"Please Clear All Errors\")\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        const context:IFormContext = {\r\n            values:this.state.values,\r\n            setValue:this.setValue,\r\n            errors:this.state.errors,\r\n            validate:this.validate\r\n        }\r\n        return(\r\n            <FormContext.Provider value={context}>\r\n                <form onSubmit={this.handleSubmit} className=\"form\" noValidate={true}>\r\n                    {this.props.children}\r\n                    <div className=\"form-group\">\r\n                        <button disabled={this.state.submitting || this.state.submitted} \r\n                         type=\"submit\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </FormContext.Provider>\r\n            )\r\n    }\r\n}\r\n\r\nForm.Field.defaultProps = {\r\n    type:\"Text\"\r\n}\r\n\r\nexport default Form","import * as React from \"react\"\r\nimport Form,{minLength,required,ISubmitResult,IValues} from \"./Form\"\r\n\r\ninterface IProps {\r\n    onSubmit : (values:IValues) => Promise<ISubmitResult>\r\n}\r\n\r\nconst ContactUs:React.SFC<IProps> = (props) => {\r\n    \r\n    const handleSubmit = async (values:IValues):Promise<ISubmitResult> => {\r\n        const result = await props.onSubmit(values)\r\n        return result\r\n    }\r\n\r\n    return(\r\n        <Form defaultValue={{\r\n            name:\"\",email:\"\",reason:\"Support\",notes:\"\"\r\n        }}\r\n        onSubmit={handleSubmit}\r\n        validationRules={{\r\n            email:{validator:required},\r\n            // notes:{validator:required},\r\n            // reason:{validator:required},\r\n            name:[{validator:required},{validator:minLength,args:2}]\r\n        }}\r\n        >\r\n            <Form.Field name=\"name\" label=\"Your name\" />\r\n            <Form.Field name=\"email\" label=\"Your Email Address\" type=\"Email\" />\r\n            <Form.Field name=\"reason\" label=\"Reason You Need To Contact Us\"\r\n             type=\"Select\"\r\n             options={[\"Marketing\",\"Support\",\"Feedback\",\"Jobs\",\"Other\"]} />\r\n             <Form.Field name=\"notes\" label=\"Additional Notes\" type=\"TextArea\" />\r\n        </Form>\r\n        )\r\n}\r\n\r\nexport default ContactUs","import * as React from \"react\"\r\nimport Contactus from \"./ContactUs\"\r\nimport { IValues, ISubmitResult } from \"./Form\"\r\nimport { wait } from \"./ProductsData\"\r\n\r\n\r\ninterface IState { \r\n    name:string;\r\n    email:string;\r\n    reason:string;\r\n    notes:string;\r\n}\r\n\r\n\r\nclass ContactUsPage extends React.Component<{},IState>{\r\n    \r\n       private handleSubmit = async (values:IValues):Promise<ISubmitResult> => {\r\n           await wait(1000)\r\n           return{\r\n               errors:{\r\n                   email:[\"something went wrong\"]\r\n               },\r\n               success:false\r\n           }\r\n       }\r\n    public render(){\r\n        return(\r\n            <div className=\"page-container\">\r\n                <h1>Contact Us</h1>\r\n                <p>If You Enter your details we'll get \r\n                    right back to you as soon as possible</p>\r\n                    <Contactus onSubmit={this.handleSubmit} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactUsPage","import React,{Suspense} from \"react\";\r\nimport {BrowserRouter as Router,RouteComponentProps,\r\n    Switch,Route,Redirect} from \"react-router-dom\"\r\nimport {CSSTransition,TransitionGroup} from \"react-transition-group\"\r\nimport Header from \"./Header\"\r\nimport ProductsPage from './ProductsPage'\r\nimport ProductPage from \"./ProductPage\"\r\nimport LoginPage from \"./LoginPage\"\r\nimport ContactUsPage from \"./ContactUsPage\"\r\nimport \"./index\"\r\nconst AdminPage = React.lazy(() => import (\"./AdminPage\"))\r\n\r\n\r\ninterface IState {\r\n    loggedIn:boolean\r\n}\r\n\r\nconst RoutesWrap:React.SFC = () => {\r\n    return(\r\n        <Router>\r\n            <Route component={Routes}/>\r\n        </Router>\r\n    )\r\n}\r\n\r\n    class Routes extends React.Component<RouteComponentProps,IState>{\r\n        constructor(props:RouteComponentProps){\r\n            super(props)\r\n            this.state = {\r\n                loggedIn:true\r\n            }\r\n        }\r\n\r\n        render(){\r\n            return(\r\n                <div>\r\n                    <Header/>\r\n                    <TransitionGroup>\r\n                        <CSSTransition\r\n                          timeout={500}\r\n                          classNames=\"animate\"\r\n                          key={this.props.location.key}>\r\n                        <Switch>\r\n                        <Route exact path=\"/products\"\r\n                         component={ProductsPage}/>\r\n                         <Route path=\"/contactus\" component={ContactUsPage} />\r\n                        <Route path=\"/admin\"\r\n                         component={AdminPage}>\r\n                            {this.state.loggedIn ? \r\n                            (<Suspense fallback={\r\n                                <div className=\"page-loading\">Loading...</div>\r\n                            }>\r\n                                <AdminPage/>\r\n                            </Suspense>) : \r\n                            (<Redirect to=\"/login\" />)}\r\n                        </Route>\r\n                        <Route path=\"/login\" component={LoginPage} />\r\n                        <Route path=\"/products/:id\"\r\n                         component={ProductPage} />\r\n                        <Route render={() => (<Redirect to=\"/products\" />)} />\r\n                         </Switch>\r\n                        </CSSTransition>\r\n                    </TransitionGroup>\r\n                    </div>\r\n            )\r\n        }\r\n    }\r\n//     const [loggedIn,setLoggedIn] = React.useState(true)\r\n    \r\n// }\r\n\r\nexport default RoutesWrap","import {Reducer} from \"redux\"\r\nimport {IProductState,ProductsAction,\r\n        ProductsActionTypes} from \"./ProductsTypes\"\r\n\r\nconst initialProductState:IProductState = {\r\n    products:[],\r\n    productsLoading:false,\r\n    currentProduct:null\r\n}\r\n\r\nexport const productsReducer:Reducer<IProductState,\r\n        ProductsAction> = (state = initialProductState,\r\n            action) => {\r\n                switch(action.type){\r\n                    case ProductsActionTypes.LOADING:\r\n                        return {\r\n                            ...state,\r\n                            productsLoading:true\r\n                        }\r\n                    case ProductsActionTypes.GETALL:\r\n                        return {\r\n                            ...state,\r\n                            products:action.products,\r\n                            productsLoading:false\r\n                        }\r\n                    case ProductsActionTypes.GETSINGLE:\r\n                        return {\r\n                            ...state,\r\n                            currentProduct:action.product,\r\n                            productsLoading:false\r\n                        }\r\n                    default:\r\n                        return state\r\n                }\r\n            }","import {Reducer} from \"redux\"\r\nimport {BasketAction,BasketActionTypes,IBasketState} from \"./BasketTypes\"\r\n\r\nconst initialBasketState: IBasketState = {\r\n    products:[]\r\n}\r\n\r\nexport const basketReducer:Reducer<IBasketState,BasketAction> = (\r\n    state=initialBasketState,action) => {\r\n        switch(action.type){\r\n            case BasketActionTypes.ADD:\r\n                return {\r\n                    ...state,\r\n                    products:state.products.concat(action.product)\r\n                }\r\n            default:\r\n                return state || initialBasketState\r\n        }\r\n    }","import {applyMiddleware,combineReducers,\r\n        createStore,Store} from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\n\r\nimport {productsReducer} from \"./ProductsReducer\"\r\nimport {IProductState} from \"./ProductsTypes\"\r\n\r\nimport {basketReducer} from \"./BasketReducer\"\r\nimport {IBasketState} from \"./BasketTypes\"\r\n\r\nexport interface IApplicationState {\r\n    products:IProductState,\r\n    basket:IBasketState\r\n}\r\n\r\nconst rootReducer = combineReducers<IApplicationState>({\r\n    products:productsReducer,\r\n    basket:basketReducer\r\n})\r\n\r\nexport default function configureStore():Store<IApplicationState>{\r\n    const store = createStore(rootReducer,undefined,applyMiddleware(thunk))\r\n    return store\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Routes from \"./Routes\"\r\nimport {Provider} from \"react-redux\"\r\nimport {Store} from \"redux\" \r\n\r\nimport configureStore,{IApplicationState} from \"./Store\"\r\n// import configureStore from './Store';\r\n\r\ninterface IProps {\r\n  store:Store<IApplicationState>\r\n}\r\nconst Root:React.SFC<IProps> = props => {\r\n  return(\r\n    <Provider store={props.store}>\r\n      <Routes/>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nconst store = configureStore()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root store={store}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}